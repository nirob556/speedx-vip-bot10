import os
import sqlite3
import logging
from datetime import datetime
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

# Configuration
API_ID = 26840974
API_HASH = "7f0ca9899acec0ddd2fa752ee348f717"
BOT_TOKEN = "7820837146:AAHanZ1qy-86DKl-iBzEjjgxGIzBpDdkE_k"
OWNER = "@NIROB_BBZ"
GROUP_LINK = "https://t.me/SPEED_X_OFFICIAL"
VIP_PASSWORD = "fire123"  # Change if needed

# Logging Setup
logging.basicConfig(
    filename="speedx_bot.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

app = Client("SPEEDX_ULTIMATE", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# Database Setup
conn = sqlite3.connect("speedx.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    language TEXT DEFAULT 'english',
    join_date TEXT,
    last_command TEXT,
    is_vip INTEGER DEFAULT 0
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS stats (
    stat_id INTEGER PRIMARY KEY AUTOINCREMENT,
    total_users INTEGER DEFAULT 0,
    total_commands INTEGER DEFAULT 0
)
""")
cursor.execute("INSERT OR IGNORE INTO stats (stat_id, total_users, total_commands) VALUES (1, 0, 0)")
conn.commit()

# Language Texts
LANGUAGES = {
    'english': {
        'welcome': "ЁЯФе **Welcome to SPEED_X Bot!** ЁЯФе \n**The Ultimate Group Management Bot** ЁЯЪА\nJoin our group and vibe with us! ЁЯМЯ",
        'group_welcome': "ЁЯФе **SPEED_X Bot added to the group!** ЁЯФе \n**The Ultimate Group Management Bot** ЁЯЪА\nUse /help to see all commands! ЁЯО╢",
        'member_welcome': "ЁЯОЙ Welcome {username} to the group! Let's vibe with SPEED_X Bot! ЁЯФе Use /help to get started!",
        'help': """ЁЯОз **SPEED_X BOT COMMANDS (English)** ЁЯФе:
/start - Start the bot
/help - Show this help message
/language - Change bot language
/join - Join our awesome group
/stats - Show bot usage stats
/vip [password] - Unlock VIP features
/broadcast [message] - Send broadcast message (Admins only)
/admin - Check bot status (Admins only)""",
        'group_joined': "ЁЯОЙ Thanks for joining our group! Let's vibe together! ЁЯШО",
        'error': "тЪая╕П Oops! Something went wrong: {}",
        'stats': "ЁЯУК **Bot Stats** ЁЯФе\nTotal Users: {}\nTotal Commands: {}",
        'admin_status': "ЁЯЫа **Bot Status** ЁЯФе\nActive: Yes\nUsers: {}\nCommands: {}\nUptime: {}",
        'vip_success': "ЁЯОЙ VIP unlocked! You can now use premium features! ЁЯФе",
        'vip_error': "тЪая╕П Invalid VIP password! Contact @NIROB_BBZ to get it. ЁЯФе",
        'not_vip': "тЪая╕П This command is for VIP users only! Unlock with /vip [password] ЁЯФе",
        'broadcast_success': "ЁЯУв Broadcast sent successfully! ЁЯФе"
    },
    'bangla': {
        'welcome': "ЁЯФе **SPEED_X ржмржЯрзЗ рж╕рзНржмрж╛ржЧрждржо!** ЁЯФе \n**ржЖрж▓ржЯрж┐ржорзЗржЯ ржЧрзНрж░рзБржк ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ ржмржЯ** ЁЯЪА\nржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж╛ржУ ржЖрж░ ржоржЬрж╛ рж╢рзБрж░рзБ ржХрж░! ЁЯМЯ",
        'group_welcome': "ЁЯФе **SPEED_X ржмржЯ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗ!** ЁЯФе \n**ржЖрж▓ржЯрж┐ржорзЗржЯ ржЧрзНрж░рзБржк ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ ржмржЯ** ЁЯЪА\nржХржорж╛ржирзНржб ржжрзЗржЦрждрзЗ /help ржмрзНржпржмрж╣рж╛рж░ ржХрж░! ЁЯО╢",
        'member_welcome': "ЁЯОЙ {username} ржЧрзНрж░рзБржкрзЗ рж╕рзНржмрж╛ржЧрждржо! SPEED_X ржмржЯрзЗрж░ рж╕рж╛ржерзЗ ржоржЬрж╛ ржХрж░! ЁЯФе /help ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ ржХрж░!",
        'help': """ЁЯОз **SPEED_X ржмржЯ ржХржорж╛ржирзНржб (ржмрж╛ржВрж▓рж╛)** ЁЯФе:
/start - ржмржЯ рж╢рзБрж░рзБ ржХрж░
/help - ржПржЗ рж╣рзЗрж▓рзНржк ржорзЗрж╕рзЗржЬ ржжрзЗржЦрж╛ржУ
/language - ржмржЯрзЗрж░ ржнрж╛рж╖рж╛ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░
/join - ржЖржорж╛ржжрзЗрж░ ржжрж╛рж░рзБржг ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж╛ржУ
/stats - ржмржЯрзЗрж░ ржмрзНржпржмрж╣рж╛рж░ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи ржжрзЗржЦрж╛ржУ
/vip [ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб] - VIP ржлрж┐ржЪрж╛рж░ ржЖржирж▓ржХ ржХрж░
/broadcast [ржорзЗрж╕рзЗржЬ] - ржмрзНрж░ржбржХрж╛рж╕рзНржЯ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржУ (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/admin - ржмржЯрзЗрж░ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржЪрзЗржХ ржХрж░ (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)""",
        'group_joined': "ЁЯОЙ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрзЗржУрзЯрж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж! ржПржЦржи ржоржЬрж╛ ржХрж░рж┐! ЁЯШО",
        'error': "тЪая╕П ржУрж╣рзЛ! ржХрж┐ржЫрзБ ржнрзБрж▓ рж╣рзЯрзЗржЫрзЗ: {}",
        'stats': "ЁЯУК **ржмржЯрзЗрж░ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи** ЁЯФе\nржорзЛржЯ ржЗржЙржЬрж╛рж░: {}\nржорзЛржЯ ржХржорж╛ржирзНржб: {}",
        'admin_status': "ЁЯЫа **ржмржЯрзЗрж░ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕** ЁЯФе\nрж╕ржХрзНрж░рж┐ржпрж╝: рж╣рзНржпрж╛ржБ\nржЗржЙржЬрж╛рж░: {}\nржХржорж╛ржирзНржб: {}\nржЖржкржЯрж╛ржЗржо: {}",
        'vip_success': "ЁЯОЙ VIP ржЖржирж▓ржХ рж╣рзЯрзЗржЫрзЗ! ржПржЦржи ржкрзНрж░рж┐ржорж┐рзЯрж╛ржо ржлрж┐ржЪрж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ! ЁЯФе",
        'vip_error': "тЪая╕П ржнрзБрж▓ VIP ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб! @NIROB_BBZ ржПрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░ред ЁЯФе",
        'not_vip': "тЪая╕П ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБ VIP ржЗржЙржЬрж╛рж░ржжрзЗрж░ ржЬржирзНржп! /vip [ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб] ржжрж┐рзЯрзЗ ржЖржирж▓ржХ ржХрж░ ЁЯФе",
        'broadcast_success': "ЁЯУв ржмрзНрж░ржбржХрж╛рж╕рзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗ! ЁЯФе"
    },
    'hindi': {
        'welcome': "ЁЯФе **SPEED_X рдмреЙрдЯ рдореЗрдВ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!** ЁЯФе \n**рдЕрд▓реНрдЯреАрдореЗрдЯ рдЧреНрд░реБрдк рдореИрдиреЗрдЬрдореЗрдВрдЯ рдмреЙрдЯ** ЁЯЪА\nрд╣рдорд╛рд░реЗ рдЧреНрд░реБрдк рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛрдВ рдФрд░ рдорд╕реНрддреА рд╢реБрд░реВ рдХрд░реЗрдВ! ЁЯМЯ",
        'group_welcome': "ЁЯФе **SPEED_X рдмреЙрдЯ рдЧреНрд░реБрдк рдореЗрдВ рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛!** ЁЯФе \n**рдЕрд▓реНрдЯреАрдореЗрдЯ рдЧреНрд░реБрдк рдореИрдиреЗрдЬрдореЗрдВрдЯ рдмреЙрдЯ** ЁЯЪА\nрдХрдорд╛рдВрдб рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП /help рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ! ЁЯО╢",
        'member_welcome': "ЁЯОЙ {username} рдЧреНрд░реБрдк рдореЗрдВ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! SPEED_X рдмреЙрдЯ рдХреЗ рд╕рд╛рде рдорд╕реНрддреА рдХрд░реЗрдВ! ЁЯФе /help рд╕реЗ рд╢реБрд░реВ рдХрд░реЗрдВ!",
        'help': """ЁЯОз **SPEED_X рдмреЙрдЯ рдХрдорд╛рдВрдб (рд╣рд┐рдВрджреА)** ЁЯФе:
/start - рдмреЙрдЯ рд╢реБрд░реВ рдХрд░реЗрдВ
/help - рдпрд╣ рдорджрдж рд╕рдВрджреЗрд╢ рджрд┐рдЦрд╛рдПрдВ
/language - рдмреЙрдЯ рднрд╛рд╖рд╛ рдмрджрд▓реЗрдВ
/join - рд╣рдорд╛рд░реЗ рд╢рд╛рдирджрд╛рд░ рдЧреНрд░реБрдк рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛрдВ
/stats - рдмреЙрдЯ рдЙрдкрдпреЛрдЧ рдЖрдБрдХрдбрд╝реЗ рджреЗрдЦреЗрдВ
/vip [рдкрд╛рд╕рд╡рд░реНрдб] - VIP рдлреАрдЪрд░реНрд╕ рдЕрдирд▓реЙрдХ рдХрд░реЗрдВ
/broadcast [рдореИрд╕реЗрдЬ] - рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рдореИрд╕реЗрдЬ рднреЗрдЬреЗрдВ (рдХреЗрд╡рд▓ рдПрдбрдорд┐рди)
/admin - рдмреЙрдЯ рд╕реНрдЯреЗрдЯрд╕ рдЪреЗрдХ рдХрд░реЗрдВ (рдХреЗрд╡рд▓ рдПрдбрдорд┐рди)""",
        'group_joined': "ЁЯОЙ рдЧреНрд░реБрдк рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛрдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж! рдЪрд▓реЛ рдорд╕реНрддреА рдХрд░реЗрдВ! ЁЯШО",
        'error': "тЪая╕П рдУрд╣реЛ! рдХреБрдЫ рдЧрд▓рдд рд╣реБрдЖ: {}",
        'stats': "ЁЯУК **рдмреЙрдЯ рдЖрдБрдХрдбрд╝реЗ** ЁЯФе\nрдХреБрд▓ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛: {}\nрдХреБрд▓ рдХрдорд╛рдВрдб: {}",
        'admin_status': "ЁЯЫа **рдмреЙрдЯ рд╕реНрдЯреЗрдЯрд╕** ЁЯФе\nрд╕рдХреНрд░рд┐рдп: рд╣рд╛рдБ\nрдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛: {}\nрдХрдорд╛рдВрдб: {}\nрдЕрдкрдЯрд╛рдЗрдо: {}",
        'vip_success': "ЁЯОЙ VIP рдЕрдирд▓реЙрдХ рд╣реБрдЖ! рдЕрдм рдЖрдк рдкреНрд░реАрдорд┐рдпрдо рдлреАрдЪрд░реНрд╕ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ! ЁЯФе",
        'vip_error': "тЪая╕П рдЧрд▓рдд VIP рдкрд╛рд╕рд╡рд░реНрдб! @NIROB_BBZ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред ЁЯФе",
        'not_vip': "тЪая╕П рдпрд╣ рдХрдорд╛рдВрдб рдХреЗрд╡рд▓ VIP рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЗ рд▓рд┐рдП рд╣реИ! /vip [рдкрд╛рд╕рд╡рд░реНрдб] рд╕реЗ рдЕрдирд▓реЙрдХ рдХрд░реЗрдВ ЁЯФе",
        'broadcast_success': "ЁЯУв рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рднреЗрдЬрд╛ рдЧрдпрд╛! ЁЯФе"
    }
}

# Get User Language
def get_lang(user_id):
    cursor.execute("SELECT language FROM users WHERE user_id = ?", (user_id,))
    lang = cursor.fetchone()
    return lang[0] if lang else 'english'

# Check VIP Status
def is_vip(user_id):
    cursor.execute("SELECT is_vip FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0

# Save User Info
def save_user(user_id, username, lang='english', command=None, is_vip=0):
    cursor.execute("""
    INSERT OR REPLACE INTO users (user_id, username, language, join_date, last_command, is_vip)
    VALUES (?, ?, ?, ?, ?, ?)
    """, (user_id, username, lang, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), command, is_vip))
    cursor.execute("UPDATE stats SET total_users = (SELECT COUNT(*) FROM users) WHERE stat_id = 1")
    cursor.execute("UPDATE stats SET total_commands = total_commands + 1 WHERE stat_id = 1")
    conn.commit()
    logger.info(f"User {user_id} ({username}) saved with language {lang}, command {command}, vip {is_vip}")

# Get Stats
def get_stats():
    cursor.execute("SELECT total_users, total_commands FROM stats WHERE stat_id = 1")
    return cursor.fetchone()

# Bot Added to Group
@app.on_message(filters.new_chat_members)
async def group_welcome(_, m: Message):
    try:
        bot_id = (await app.get_me()).id
        if bot_id in [member.id for member in m.new_chat_members]:
            lang = 'english'
            buttons = InlineKeyboardMarkup([
                [InlineKeyboardButton("Join Our Group ЁЯФе", url=GROUP_LINK)]
            ])
            await m.reply(LANGUAGES[lang]['group_welcome'], reply_markup=buttons)
            logger.info(f"Bot added to group {m.chat.id}")
    except Exception as e:
        logger.error(f"Error in group_welcome: {str(e)}")

# New Member Welcome
@app.on_message(filters.new_chat_members & ~filters.bot)
async def member_welcome(_, m: Message):
    try:
        lang = get_lang(m.from_user.id)
        for member in m.new_chat_members:
            await m.reply(LANGUAGES[lang]['member_welcome'].format(username=member.username or member.first_name))
            logger.info(f"New member {member.id} welcomed in group {m.chat.id}")
    except Exception as e:
        logger.error(f"Error in member_welcome: {str(e)}")

# Start Command
@app.on_message(filters.command("start") & filters.private)
async def start_command(_, m: Message):
    try:
        user_id = m.from_user.id
        username = m.from_user.username or m.from_user.first_name
        lang = get_lang(user_id)
        save_user(user_id, username, lang, "start")
        
        buttons = InlineKeyboardMarkup([
            [InlineKeyboardButton("Join Our Group ЁЯФе", url=GROUP_LINK)],
            [InlineKeyboardButton("English", callback_data="lang_english"),
             InlineKeyboardButton("ржмрж╛ржВрж▓рж╛", callback_data="lang_bangla"),
             InlineKeyboardButton("рд╣рд┐рдВрджреА", callback_data="lang_hindi")]
        ])
        await m.reply(LANGUAGES[lang]['welcome'], reply_markup=buttons)
        logger.info(f"User {user_id} started the bot")
    except Exception as e:
        lang = get_lang(m.from_user.id)
        await m.reply(LANGUAGES[lang]['error'].format(str(e)))
        logger.error(f"Error in start_command: {str(e)}")

# Help Command
@app.on_message(filters.command("help") & filters.group)
async def help_command(_, m: Message):
    try:
        lang = get_lang(m.from_user.id)
        save_user(m.from_user.id, m.from_user.username or m.from_user.first_name, lang, "help")
        buttons = InlineKeyboardMarkup([
            [InlineKeyboardButton("Join Group ЁЯФе", url=GROUP_LINK)]
        ])
        await m.reply(LANGUAGES[lang]['help'], reply_markup=buttons)
        logger.info(f"User {m.from_user.id} used help command in group {m.chat.id}")
    except Exception as e:
        lang = get_lang(m.from_user.id)
        await m.reply(LANGUAGES[lang]['error'].format(str(e)))
        logger.error(f"Error in help_command: {str(e)}")

# Join Group Command
@app.on_message(filters.command("join"))
async def join_command(_, m: Message):
    try:
        lang = get_lang(m.from_user.id)
        save_user(m.from_user.id, m.from_user.username or m.from_user.first_name, lang, "join")
        buttons = InlineKeyboardMarkup([
            [InlineKeyboardButton("Join Now ЁЯФе", url=GROUP_LINK)]
        ])
        await m.reply(LANGUAGES[lang]['group_joined'], reply_markup=buttons)
        logger.info(f"User {m.from_user.id} used join command")
    except Exception as e:
        lang = get_lang(m.from_user.id)
        await m.reply(LANGUAGES[lang]['error'].format(str(e)))
        logger.error(f"Error in join_command: {str(e)}")

# Language Selector
@app.on_message(filters.command("language"))
async def language_command(_, m: Message):
    try:
        save_user(m.from_user.id, m.from_user.username or m.from_user.first_name, get_lang(m.from_user.id), "language")
        buttons = InlineKeyboardMarkup([
            [InlineKeyboardButton("English", callback_data="lang_english"),
             InlineKeyboardButton("ржмрж╛ржВрж▓рж╛", callback_data="lang_bangla"),
             InlineKeyboardButton("рд╣рд┐рдВрджреА", callback_data="lang_hindi")]
        ])
        await m.reply("ЁЯФе **Select Language / ржнрж╛рж╖рж╛ ржмрж╛ржЫрж╛ржЗ ржХрж░рзБржи / рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ:** ЁЯФе", reply_markup=buttons)
        logger.info(f"User {m.from_user.id} used language command")
    except Exception as e:
        lang = get_lang(m.from_user.id)
        await m.reply(LANGUAGES[lang]['error'].format(str(e)))
        logger.error(f"Error in language_command: {str(e)}")

# Language Callback Handler
@app.on_callback_query(filters.regex(r"^lang_"))
async def language_callback(_, query):
    try:
        lang = query.data.split("_")[1]
        user_id = query.from_user.id
        username = query.from_user.username or query.from_user.first_name
        save_user(user_id, username, lang, "language_callback")
        await query.message.edit_text(f"Language set to {lang.capitalize()}! / ржнрж╛рж╖рж╛ {lang} ржП рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ! / рднрд╛рд╖рд╛ {lang} рдореЗрдВ рд╕реЗрдЯ рдХреА рдЧрдИ! ЁЯФе")
        await query.answer()
        logger.info(f"User {user_id} changed language to {lang}")
    except Exception as e:
        lang = get_lang(query.from_user.id)
        await query.message.edit_text(LANGUAGES[lang]['error'].format(str(e)))
        logger.error(f"Error in language_callback: {str(e)}")

# VIP Command
@app.on_message(filters.command("vip"))
async def vip_command(_, m: Message):
    try:
        lang = get_lang(m.from_user.id)
        user_id = m.from_user.id
        username = m.from_user.username or m.from_user.first_name
        if len(m.text.split()) < 2:
            await m.reply(LANGUAGES[lang]['error'].format("Please provide the VIP password"))
            return
        password = m.text.split(maxsplit=1)[1]
        if password == VIP_PASSWORD:
            save_user(user_id, username, lang, "vip", is_vip=1)
            await m.reply(LANGUAGES[lang]['vip_success'])
            logger.info(f"User {user_id} unlocked VIP")
        else:
            await m.reply(LANGUAGES[lang]['vip_error'])
            logger.warning(f"User {user_id} failed VIP unlock attempt")
    except Exception as e:
        lang = get_lang(m.from_user.id)
        await m.reply(LANGUAGES[lang]['error'].format(str(e)))
        logger.error(f"Error in vip_command: {str(e)}")

# Broadcast Command
@app.on_message(filters.command("broadcast") & filters.group)
async def broadcast_command(_, m: Message):
    try:
        lang = get_lang(m.from_user.id)
        user_id = m.from_user.id
        member = await app.get_chat_member(m.chat.id, user_id)
        if member.status not in ["creator", "administrator"]:
            await m.reply(LANGUAGES[lang]['error'].format("Only admins can use this command"))
            return
        save_user(user_id, m.from_user.username or m.from_user.first_name, lang, "broadcast")
        if len(m.text.split()) < 2:
            await m.reply(LANGUAGES[lang]['error'].format("Please provide a broadcast message"))
            return
        message = m.text.split(maxsplit=1)[1]
        await m.reply(f"ЁЯУв {message} ЁЯФе")
        await m.reply(LANGUAGES[lang]['broadcast_success'])
        logger.info(f"Admin {user_id} sent broadcast in group {m.chat.id}: {message}")
    except Exception as e:
        lang = get_lang(m.from_user.id)
        await m.reply(LANGUAGES[lang]['error'].format(str(e)))
        logger.error(f"Error in broadcast_command: {str(e)}")

# Admin Command
@app.on_message(filters.command("admin") & filters.group)
async def admin_command(_, m: Message):
    try:
        lang = get_lang(m.from_user.id)
        save_user(m.from_user.id, m.from_user.username or m.from_user.first_name, lang, "admin")
        
        # Check if user is admin
        member = await app.get_chat_member(m.chat.id, m.from_user.id)
        if member.status not in ["creator", "administrator"]:
            await m.reply(LANGUAGES[lang]['error'].format("Only admins can use this command"))
            return
        
        total_users, total_commands = get_stats()
        uptime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        await m.reply(LANGUAGES[lang]['admin_status'].format(total_users, total_commands, uptime))
        logger.info(f"Admin {m.from_user.id} checked bot status in group {m.chat.id}")
    except Exception as e:
        lang = get_lang(m.from_user.id)
        await m.reply(LANGUAGES[lang]['error'].format(str(e)))
        logger.error(f"Error in admin_command: {str(e)}")

# Stats Command
@app.on_message(filters.command("stats"))
async def stats_command(_, m: Message):
    try:
        lang = get_lang(m.from_user.id)
        save_user(m.from_user.id, m.from_user.username or m.from_user.first_name, lang, "stats")
        total_users, total_commands = get_stats()
        await m.reply(LANGUAGES[lang]['stats'].format(total_users, total_commands))
        logger.info(f"User {m.from_user.id} checked stats")
    except Exception as e:
        lang = get_lang(m.from_user.id)
        await m.reply(LANGUAGES[lang]['error'].format(str(e)))
        logger.error(f"Error in stats_command: {str(e)}")

# Run the Bot
if __name__ == "__main__":
    print("ЁЯФе SPEED_X BOT STARTED! ЁЯЪА")
    logger.info("Bot started")
    try:
        app.run()
    except Exception as e:
        logger.error(f"Bot crashed: {str(e)}")
